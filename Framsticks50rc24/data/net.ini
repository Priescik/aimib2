global path_definitions,creature_def,genotype_def,creaturesgroup_def,genotypegroup_def;
global mechpart_def, mechjoint_def, part_def, joint_def, neuro_def, neuroimpl_def, event_def;
global curr_def, curr_collection, curr_parent;

// currently read file
global g_file;


global g_needfiles;
global g_current_needfile;

global g_use_branched, g_use_file, g_use_oldprop;
global g_use_request_id, g_use_needfile_id; // features negotiated by the "use" command
global g_use_worldmap_script, g_use_worldmap_script_arg;
global g_use_groupnames;

const FAKE_ID = "~";


function init()
{
	g_needfiles = Dictionary.new();

	mechpart_def = ["", "MechPart", null, null];
	mechjoint_def = ["", "MechJoint", null, null];
	part_def = ["", "Part", null, null];
	joint_def = ["", "Joint", null, null];
	neuro_def = ["", "NeuroDef", null, null];
	neuroimpl_def = ["", "Neuro", null, null];
	event_def = ["", "Event", null, null];

	creature_def =
	    ["", "Creature", null,
	         [["parts", "Model Parts", "l Part", "",
	           function creatureparts_count, function creature_get_part, part_def],
	          ["joints", "Model Joints", "l Joint", "",
	           function creaturejoints_count, function creature_get_joint, joint_def],
	          ["neurodefs", "Neuron Definitions", "l NeuroDef", "",
	           function creatureneurons_count, function creature_get_neuro, neuro_def],
	          ["mechparts", "Simulated Parts", "l MechPart", "",
	           function creaturemechparts_count, function creature_get_mechpart, mechpart_def],
	          ["mechjoints", "Simulated Joints", "l MechJoint", "",
	           function creaturemechjoints_count, function creature_get_mechjoint, mechjoint_def],
	          ["neurons", "Live Neurons", "l Neuro", "",
	           function creatureneuroimpls_count, function creature_get_neuroimpl, neuroimpl_def]]
	        ];

	genotype_def =
	    ["", "Genotype", null,
	         [["parts", "Model Parts", "l Part", "",
	           function genotypeparts_count, function genotype_get_part, part_def],
	          ["joints", "Model Joints", "l Joint", "",
	           function genotypejoints_count, function genotype_get_joint, joint_def],
	          ["neurodefs", "Neuron Definitions", "l NeuroDef", "",
	           function genotypeneurons_count, function genotype_get_neuro, neuro_def]]
	        ];

	creaturesgroup_def =
	    ["", "Population", null,
	         [["creatures", "Creatures", "l Creature uid", "", function creaturesgroup_get_count, function creaturesgroup_get_creature, creature_def],
	          ["creatures_changed", "creatures list changed", "e ListChange", "", function livechanged_events]]
	        ];

	genotypegroup_def =
	    ["", "GenePool", null,
	         [["genotypes", "Genotypes", "l Genotype uid", "", function genotypegroup_get_count, function genotypegroup_get_genotype, genotype_def],
	          ["genotypes_changed", "genotype list changed", "e ListChange", "", function genchanged_events]]
	        ];

	path_definitions =
	    [
	        ["/simulator/expproperties", "ExpParams", ExpProperties.*, []],
	        ["/simulator/expstate", "ExpState", ExpState.*, []],
	        ["/simulator/stats", "stats", stats.*, []],
	        ["/simulator/userscripts", "UserScripts", UserScripts.*, []],

	        ["/simulator/populations", "Populations", Populations.*,
	         [["groups", "Groups", "l Population", "", function populations_get_count, function populations_get_group, creaturesgroup_def],
	          ["groups_changed", "change events", "e ListChange", "", SimulatorEvents.livegroupchanged]]],

	        ["/simulator/genepools", "GenePools", GenePools.*,
	         [["groups", "Groups", "l GenePool", "", function genotypegroups_get_count, function genotypegroups_get_group, genotypegroup_def],
	          ["groups_changed", "change events", "e ListChange", "", SimulatorEvents.gengroupchanged]]],

	        ["/simulator/world", "World", World.*,
	         [["geometry", "Geometry", "s", "world geometry", function world_get_geometry]]
	        ],

	        ["/simulator", "Simulator", Simulator.*,
	         [["world", "World", "o World", ""],
	          ["expproperties", "Experiment Parameters", "o ExpParams", ""],
	          ["expstate", "Experiment State", "o ExpState", ""],
	          ["genepools", "Gene pools", "o GenePools", ""],
	          ["populations", "Populations", "o Populations", ""],
	          ["stats", "stats", "o stats", ""],
	          ["userscripts", "User scripts", "o UserScripts", ""],
	          ["running_changed", "Simulation started/stopped", "e", "", SimulatorEvents.simrun],
	          ["netload", "load experiment", "p()", "accepts the file from client", function simulator_netload],
	          ["netload_id", "load experiment", "p(s)", "accepts the file from client", function simulator_netload_id],
	          ["netsave", "save experiment", "p()", "sends the file to client", function simulator_netsave],
	          ["netimport", "import file", "p(d options)", "accepts the file from client", function simulator_netimport],
	          ["netexport", "export file", "p(d options,d genotypegroup,d creaturesgroup)", "sends the file to client", function simulator_netexport],
	          ["stepevent", "Simulation step", "e SimStep", "", SimulatorEvents.simstep],
	          ["checkpointevent", "Checkpoint event", "e Checkpoint", "", SimulatorEvents.checkpoint]]],

	        ["/cli", "CLI", CLI.*,
	         [["events", "Registered events", "l Event id", "", function events_get_count, function events_get_event, event_def],
	          ["messages", "General messages", "e Msg", "", SimulatorEvents.msg]]],

	        ["/", "Server", null,
	         [["simulator", "Simulator", "o Simulator", ""],
	          ["cli", "Commandline interface", "o CLI", ""],
	          ["motd", "Message of the day", "s", "", "Welcome to the Framsticks server."] //you can edit this default message and adapt it to your server - for example: mention institution, server name, location and role [see https://en.wikipedia.org/wiki/Motd_(Unix)]. All clients should display the message on successful connection.
	         ]]
	    ];

	CLI.addMacro("?", 1, "CLI.println($1);", "evaluate expression");
	CLI.addMacro("lm", 0, "CLI.listMacros();", "list commandline macros");
	CLI.addMacro("qu", 0, "CLI.quit();", "leave comand shell");
	CLI.addMacro("expdef", 1, "Simulator.expdef=\"$1\";", "set the experiment definition");
	CLI.addMacro("version", 1, "net_version($1);", "network protocol check");

	CLI.addMacro("client_v1", 0, "net_version(1);", "network protocol check");
	CLI.addMacro("t", 1, "test(\"$1\");;", "test");

	// client version
	g_use_groupnames = 0;
	g_use_worldmap_script = null;
	g_use_worldmap_script_arg = null;
	g_use_branched = 1;
	g_use_request_id = 0;
	g_use_file = 1;
	g_use_needfile_id = 0;
	g_use_oldprop = 0;
	define_client();

	//CLI.println("Welcome to the Framsticks Server! :)");
}

function net_remove_macros()
{
	CLI.removeMacro("get", -2);
	CLI.removeMacro("set", -2);
	CLI.removeMacro("info", -2);
	CLI.removeMacro("call", -2);
	CLI.removeMacro("reg", -2);
	CLI.removeMacro("file", -2);
}

function net_use(id, feature)
{
	switch (feature)
	{
	case "request_id":
		g_use_request_id = 1;
		break;
	case "needfile_id":
		g_use_needfile_id = 1;
		break;
	case "groupnames":
		g_use_groupnames = 1;
		break;

	default:
		if (String.startsWith(feature,"worldmap_"))
		{
			var words = String.split(feature,"_");
			var name = words[1];
			var full_name = "script_WorldMap_"+name+"_args";
			if (UserScripts._propertyExists(full_name))
				{
				g_use_worldmap_script = name;
				g_use_worldmap_script_arg = (words.size>2) ? words[2] : null;
				}
			else
				{
				CLI.println("error" + id_or_empty(id) + " worldmap script \"" + name + "\" not available");
				return;
				}
		}
		else
			CLI.println("error" + id_or_empty(id) + " \"feature " + feature + " not supported\"");
		return;
	}
	define_client();
	CLI.println("ok" + id_or_empty(id));
}

function net_badargs()
{
	CLI.println("error \"bad arguments\"");
}

function net_version(ver)
{
	if (ver == 1)
	{
		g_use_branched = 0;
		g_use_request_id = 1;
		g_use_file = 0;
		g_use_oldprop = 1;
	}
	else if (ver == 2)
	{
		g_use_branched = 0;
		g_use_request_id = 0;
		g_use_file = 1;
		g_use_oldprop = 1;
	}
	else if ((ver == 3) || (ver == 4))
	{
		g_use_branched = 1;
		g_use_request_id = 0;
		g_use_file = 1;
		g_use_oldprop = 1;
	}
	else if (ver == 5)
	{
		g_use_branched = 1;
		g_use_request_id = 0;
		g_use_file = 1;
		g_use_oldprop = 0;
	}
	else
	{
		CLI.println("error \"protocol version " + ver + " not supported\"");
		return;
	}
	g_use_groupnames = 0;
	g_use_worldmap_script = null;
	g_use_worldmap_script_arg = null;

	define_client();
	CLI.println("ok");
}

function define_client()
{
	net_remove_macros();


	if (g_use_file)
	{
		if (g_use_needfile_id && g_use_request_id)
		{
			CLI.addMacro("file", 1, "net_file(\"$1\", \"\");", "network protocol \"file\"");
			CLI.addMacro("file", 2, "net_file(\"$1\", \"$2\");", "network protocol \"file\"");
		}
		else
		{
			CLI.addMacro("file", 0, "net_file(\""+FAKE_ID+"\", \"\");", "network protocol \"file\"");
			CLI.addMacro("file", 1, "net_file(\""+FAKE_ID+"\", \"$1\");", "network protocol \"file\"");
		}
	}

	if (g_use_request_id)
	{
		CLI.addMacro("info", 1, "net_badargs();", "");
		CLI.addMacro("get", 1, "net_badargs();", "");
		CLI.addMacro("set", 1, "net_badargs();", "");
		CLI.addMacro("set", 3, "net_badargs();", "");
		CLI.addMacro("call", 2, "net_badargs();", "");
		CLI.addMacro("reg", 1, "net_badargs();", "");

		CLI.addMacro("info", 2, "net_info(\"$1\",\"$2\");", "network protocol \"info\"");
		CLI.addMacro("get", 2, "net_get(\"$1\",\"$2\",null);", "network protocol \"get\"");
		CLI.addMacro("get", 3, "net_get(\"$1\",\"$2\",\"$3\");", "network protocol \"get\"");
		CLI.addMacro("set", 2, "net_set_file(\"$1\",\"$2\");", "network protocol \"set\"");
		CLI.addMacro("set", 4, "net_set(\"$1\",\"$2\",\"$3\",\"$4\");", "network protocol \"set\"");
		CLI.addMacro("call", 3, "net_call(\"$1\",\"$2\",\"$3\",null,null,null);", "network protocol \"call\"");
		CLI.addMacro("call", 4, "net_call(\"$1\",\"$2\",\"$3\",\"$4\",null,null);", "network protocol \"call\"");
		CLI.addMacro("call", 5, "net_call(\"$1\",\"$2\",\"$3\",\"$4\",\"$5\",null);", "network protocol \"call\"");
		CLI.addMacro("call", 6, "net_call(\"$1\",\"$2\",\"$3\",\"$4\",\"$5\",\"$6\");", "network protocol \"call\"");
		CLI.addMacro("reg", 2, "net_reg(\"$1\",\"$2\",0,null);", "network protocol \"reg\"");
		CLI.addMacro("reg", 3, "net_reg(\"$1\",\"$2\",$3,null);", "network protocol \"reg\"");
		CLI.addMacro("reg", 4, "net_reg(\"$1\",\"$2\",$3,\"$4\");", "network protocol \"reg\"");

		if (g_use_branched)
		{
			CLI.addMacro("get", 2, "net_get_3(\"$1\",\"$2\",null);", "network protocol \"get\"");
			CLI.addMacro("get", 3, "net_get_3(\"$1\",\"$2\",\"$3\");", "network protocol \"get\"");
		}
		else
		{
			CLI.addMacro("get", 2, "net_get(\"$1\",\"$2\",null);", "network protocol \"get\"");
			CLI.addMacro("get", 3, "net_get(\"$1\",\"$2\",\"$3\");", "network protocol \"get\"");
		}

		CLI.addMacro("use", 2, "net_use(\"$1\",\"$2\");", "network protocol \"use\"");
	}
	else
	{
		CLI.addMacro("info", 2, "net_badargs();", "");
		CLI.addMacro("get", 3, "net_badargs();", "");
		CLI.addMacro("set", 2, "net_badargs();", "");
		CLI.addMacro("set", 4, "net_badargs();", "");
		CLI.addMacro("call", 6, "net_badargs();", "");
		CLI.addMacro("reg", 4, "net_badargs();", "");

		CLI.addMacro("info", 1, "net_info(\"\",\"$1\");", "network protocol \"info\"");
		CLI.addMacro("get", 1, "net_get(\"\",\"$1\",null);", "network protocol \"get\"");
		CLI.addMacro("get", 2, "net_get(\"\",\"$1\",\"$2\");", "network protocol \"get\"");
		CLI.addMacro("set", 1, "net_set_file(\"\",\"$1\");", "network protocol \"set\"");
		CLI.addMacro("set", 3, "net_set(\"\",\"$1\",\"$2\",\"$3\");", "network protocol \"set\"");
		CLI.addMacro("call", 2, "net_call(\"\",\"$1\",\"$2\",null,null,null);", "network protocol \"call\"");
		CLI.addMacro("call", 3, "net_call(\"\",\"$1\",\"$2\",\"$3\",null,null);", "network protocol \"call\"");
		CLI.addMacro("call", 4, "net_call(\"\",\"$1\",\"$2\",\"$3\",\"$4\",null);", "network protocol \"call\"");
		CLI.addMacro("call", 5, "net_call(\"\",\"$1\",\"$2\",\"$3\",\"$4\",\"$5\");", "network protocol \"call\"");
		CLI.addMacro("reg", 1, "net_reg(\"\",\"$1\",0,null);", "network protocol \"reg\"");
		CLI.addMacro("reg", 2, "net_reg(\"\",\"$1\",$2,null);", "network protocol \"reg\"");
		CLI.addMacro("reg", 3, "net_reg(\"\",\"$1\",$2,\"$3\");", "network protocol \"reg\"");

		if (g_use_branched)
		{
			CLI.addMacro("get", 1, "net_get_3(\"\",\"$1\",null);", "network protocol \"get\"");
			CLI.addMacro("get", 2, "net_get_3(\"\",\"$1\",\"$2\");", "network protocol \"get\"");
		}
		else
		{
			CLI.addMacro("get", 1, "net_get(\"\",\"$1\",null);", "network protocol \"get\"");
			CLI.addMacro("get", 2, "net_get(\"\",\"$1\",\"$2\");", "network protocol \"get\"");
		}

		CLI.addMacro("use", 1, "net_use(\"\", \"$1\");", "network protocol \"use\"");
	}
}

function requestFiles(name, info, count, fun, request_id, args)
{
	var id;
	var print_id;
	if ((g_use_needfile_id && g_use_request_id) == 0)
	{
		if (g_needfiles.size > 0)
		{
			CLI.println("error " + request_id + " \"there is a needfile request pending\"");
			return;
		}
		id = FAKE_ID;
		print_id = "";
	}
	else
	{
		id = request_id;
		print_id = request_id;
	}
	g_needfiles[id] = {"count": count, "ready_fun": fun, "files": [], "id": id, "request_id": request_id, "args": args};
	g_file = "";

	CLI.println("needfile" + id_or_empty(print_id) + " \"" + name + "\" \"" + info + "\"");
}

function requestFile(name, info, fun, request_id, args)
{
	requestFiles(name, info, 1, fun, request_id, args);
}

function file_handler(txt)
{
	if (txt == "eof")
	{
		CLI.cmdhandler = "";
		if (g_current_needfile == null)
		{
			Simulator.print("ignoring file");
			return;
		}
		g_current_needfile->files.add(g_file);
		if (g_current_needfile->files.size == g_current_needfile->count)
		{
			call (g_current_needfile->ready_fun)(g_current_needfile->files,g_current_needfile->args);
			CLI.println("ok" + id_or_empty(g_current_needfile->request_id));
			g_needfiles.remove(g_current_needfile->id);
		}
		return ;
	}
	txt = String.unquoteEof(txt);
	g_file = g_file + txt + "\n";
}

function net_file(id, name)
{
	if (!g_needfiles.hasKey(id))
	{
		CLI.println("error" + id_or_empty(id) + " \"unknown file id\"");
		g_current_needfile = null;
	}
	else
		g_current_needfile = g_needfiles.get(id);
	CLI.cmdhandler = "file_handler";
	g_file = "";
}

function test(path)
{
	var handler = find_best_def(path);
	if (handler == null)
	{
		CLI.println("invalid path");
		return ;
	}
	if (analyze_path(handler, path))
	{
		CLI.println("path ok");
		CLI.println("curr_def=" + curr_def);
		CLI.println("curr_def[0]=" + curr_def[0]);
		CLI.println("curr_def[2]=" + curr_def[2]);
	}
	else
		CLI.println("invalid path");
}

function simulator_netload(obj, id, arg1, arg2, arg3)
{
	requestFile("*.expt", "Experiment", function simulator_netload_ready, id, []);
}

function simulator_netload_id(obj, id, arg1, arg2, arg3)
{
	requestFile("*.expt", arg1, function simulator_netload_ready, id, []);
}

function simulator_netload_ready(files, args)
{
	Simulator.load("string://" + files[0]);
// in older versions we used a temporary file:
//  var f = File.create("tmpsave", "temporary file");
//  f.writeString(files.get(0));
//  f.close();
//  Simulator.load("scripts_output" + f.pathseparator + "tmpsave");
}

function simulator_netsave(obj, id, arg1, arg2, arg3)
{
	var t = Simulator.save(null); //new in 3.2rc7 - save to string
// in older versions we used a temporary file:
//  Simulator.save("tmpsave");
//  var f = File.open("scripts_output"+File.pathseparator+"tmpsave");
//  var t = f.readUntilEOF();
	CLI.println("file" + id_or_empty(id) + " experiment.expt \"Current experiment state\"");
	CLI.println(String.quoteEof(t));
	CLI.println("eof");
	CLI.println("ok" + id_or_empty(id));
}

function simulator_netimport(obj, id, arg1, arg2, arg3)
{
	requestFile("*", "File to be imported into the simulator", function simulator_netimport_ready, id, [arg1]);
}

function simulator_netimport_ready(files, args)
{
// in older versions we used a temporary file:
//  var f = File.create("tmpsave", "temporary file");
//  f.writeString(files.get(0));
//  f.close();
//  Simulator.import("scripts_output" + f.pathseparator + "tmpsave", 0+g_tmp);
	Simulator.import("string://" + files[0], int(args[0]));
}

function simulator_netexport(obj, id, arg1, arg2, arg3)
{
// in older versions we used a temporary file:
//  Simulator.export("tmpsave", arg1, arg2, arg3);
//  var f = File.open("scripts_output" + File.pathseparator +"tmpsave");
//  var t = f.readUntilEOF();
	var t = Simulator.export(null, arg1, arg2, arg3); //new in 3.2rc7 - save to string
	CLI.println("file" + id_or_empty(id));
	CLI.println(String.quoteEof(t));
	CLI.println("eof");
	CLI.println("ok" + id_or_empty(id));
}

function find_best_def(path)
{
	var i;
	for (i = 0; i < path_definitions.size; i++)
	{
		var d = path_definitions[i];
		if (String.left(path, String.len(d[0])) == d[0])
			return d;
	}
	return null;
}

function analyze_path(def, path)
{
	//CLI.println("analyze_path("+def[0]+","+path+")   obj="+def[2]);
	curr_collection = null;
	if (def == null)
		return 0;
	var xtraprops = def[3];
	var i;
	if (path != def[0])
	{
		if (xtraprops != null)
		{
			var subpath = String.substr(path, String.len(def[0]) + 1, 999);
			var subname = String.indexOf(subpath, "/");
			if (subname < 0)
				subname = subpath;
			else
				subname = String.left(subpath, subname);
			for (i = 0; i < xtraprops.size; i++)
			{
				var prop = xtraprops[i];
				if (subname == prop[0])
				{
					var t = String.substr(prop[2], 0, 1);
					if (t == "l")
					{
						subpath = String.substr(subpath, String.len(prop[0]) + 1, 999);
						return analyze_collection_path(def[2], prop, subpath);
					}
					else if (t == "e")
					{
						curr_def = prop;
						curr_parent = def[2];
						//					obj=call(propdata[5])(curr_parent,null);
						//					curr_def.set(2,obj);
						return 1;
					}
				}
			}
		}
		return 0;
	}
	curr_def = def;
	return 1;
}

function analyze_collection_path(parent, propdata, path)
{
	//Simulator.print("analyze_collection_path("+parent+",["+propdata[0]+",...],"+path+")");
	var obj;
	if (path == "")
	{
		curr_collection = propdata;
		curr_parent = parent;
		obj = call(propdata[5])(parent, -1);
		curr_def = propdata[6];
		curr_def[2] = obj;
		return 1;
	}
	var i = String.indexOf(path, "/");
	if (i < 0)
		i = 999;
	var index = String.substr(path, 0, i);
	var num_index = String.parseNumber(index);
	if (num_index != null) index = num_index;
	//Simulator.print("collection index="+index);
	path = String.substr(path, i, 999);
	obj = call(propdata[5])(parent, index);
	//Simulator.print("collection subobject="+obj);
	if (obj == null)
		return 0;
	propdata[6][2] = obj;
	return analyze_path(propdata[6], path);
}

function id_or_empty(id)
{
	if (id == "") return "";
	return " " + id;
}

function standard_info(id, cls, obj, xtraprops)
{
	CLI.println("file" + id_or_empty(id));
	CLI.println("class:\nid:" + cls + "\n");
	if (obj != null)
		CLI.print(String.quoteEof(propsForObject(obj)));
	if (xtraprops != null)
	{
		var i;
		for (i = 0; i < xtraprops.size; i++)
		{
			var prop = xtraprops[i];
			CLI.println(String.quoteEof(makePropDef(prop[0], prop[1], prop[2], 0, prop[3], "")));
		}
	}
	CLI.println("eof");
	CLI.println("ok" + id_or_empty(id));
}

function world_get_geometry(obj)
{
	return WorldMap.getAsString(g_use_worldmap_script, g_use_worldmap_script_arg);
}

function creaturemechparts_count(obj)
{
	if (obj == null)
		return 0;
	return obj.numparts;
}

function creature_get_mechpart(obj, selector)
{
	if (selector < 0)
		return MechPart.*;
	return obj.getMechPart(selector);
}

function creaturemechjoints_count(obj)
{
	if (obj == null)
		return 0;
	return obj.numjoints;
}

function creature_get_mechjoint(obj, selector)
{
	if (selector < 0)
		return MechJoint.*;
	return obj.getMechJoint(selector);
}


function creatureparts_count(obj)
{
	if (obj == null)
		return 0;
	return obj.numparts;
}

function creature_get_part(obj, selector)
{
	if (selector < 0)
		return Part.*;
	return obj.getPart(selector);
}

function creaturejoints_count(obj)
{
	if (obj == null)
		return 0;
	return obj.numjoints;
}

function creature_get_joint(obj, selector)
{
	if (selector < 0)
		return Joint.*;
	return obj.getJoint(selector);
}

function creatureneurons_count(obj)
{
	if (obj == null)
		return 0;
	return obj.numneurons;
}

function creature_get_neuro(obj, selector)
{
	if (selector < 0)
		return NeuroDef.*;
	return obj.getNeuroDef(selector);
}

function creatureneuroimpls_count(obj)
{
	if (obj == null)
		return 0;
	return obj.numneurons;
}

function creature_get_neuroimpl(obj, selector)
{
	if (selector < 0)
		return Neuro.*;
	return obj.getNeuro(selector);
}

///////////////////////////

function genotypeparts_count(obj)
{
	if (obj == null) return 0;
	var m = obj.getModel();
	if (m == null) return 0;
	return m.numparts;
}

function genotype_get_part(obj, selector)
{
	if (selector < 0)
		return Part.*;
	var m = obj.getModel();
	return m.getPart(selector);
}

function genotypejoints_count(obj)
{
	if (obj == null) return 0;
	var m = obj.getModel();
	if (m == null) return 0;
	return m.numjoints;
}

function genotype_get_joint(obj, selector)
{
	if (selector < 0)
		return Joint.*;
	var m = obj.getModel();
	return m.getJoint(selector);
}

function genotypeneurons_count(obj)
{
	if (obj == null) return 0;
	var m = obj.getModel();
	if (m == null) return 0;
	return m.numneurons;
}

function genotype_get_neuro(obj, selector)
{
	if (selector < 0)
		return NeuroDef.*;
	var m = obj.getModel();
	return m.getNeuroDef(selector);
}

/////////////////////////////////////

function populations_get_group(obj, selector)
{
	if (selector < 0)
		return Population.*;
	return Populations.get(selector);
}

function populations_get_count(obj)
{
	if (obj == null)
		return 0;
	return obj.size;
}

function genotypegroups_get_group(obj, selector)
{
	if (selector < 0)
		return GenePool.*;
	return GenePools.get(selector);
}

function genotypegroups_get_count(obj)
{
	if (obj == null)
		return 0;
	return obj.size;
}

function creaturesgroup_get_creature(obj, selector)
{
	if ((typeof(selector) == "int") && (selector < 0))
		return Creature.*;
	return obj.get(selector);
}

function creaturesgroup_get_count(obj)
{
	if (obj == null)
		return 0;
	return obj.size;
}

function genotypegroup_get_genotype(obj, selector)
{
	if ((typeof(selector) == "int") && (selector < 0))
		return Genotype.*;
	return obj.get(selector);
}

function genotypegroup_get_count(obj)
{
	if (obj == null)
		return 0;
	return obj.size;
}

function events_get_event(obj, selector)
{
	if ((typeof(selector) == "int") && (selector < 0))
		return Event.*;
	return EventReceiver.get(selector);
}

function events_get_count(obj)
{
	if (obj == null)
		return 0;
	return EventReceiver.count;
}

function livechanged_events(obj)
{
	//Simulator.print("liveadded_events..."+obj+"...index="+obj.index);
	return SimulatorEvents.livechanged(obj.index);
}

function genchanged_events(obj)
{
	return SimulatorEvents.genchanged(obj.index);
}

function serializeField(r)
{
	switch(typeof(r))
	{
	case "null":
	case "int":
	case "float":
		return r;
	default:
		return "@Serialized:" + String.serialize(r);
	}
}

function net_call(id, path, action, arg1, arg2, arg3)
{
	var def = find_best_def(path);
	if (analyze_path(def, path))
	{
		if (curr_collection != null)
		{
			CLI.println("error" + id_or_empty(id) + " \"invalid collection path for call\"");
			return ;
		}
		var iface = Interface.makeFrom(curr_def[2]);
		if (iface == null)
		{
			CLI.println("error" + id_or_empty(id) + " \"object not found for call\"");
			return ;
		}
		var i = iface.findId(action);
		if (i >= 0)
		{
			var args = Vector.new();
			if (arg1 != null)
				args.add(arg1);
			if (arg2 != null)
				args.add(arg2);
			if (arg3 != null)
				args.add(arg3);
			var ret = iface.invoke(i, args);
			if ((typeof(ret)!="invalid") && (ret != null))
				CLI.println("file" + id_or_empty(id) + "\nResult:\nvalue:" + String.quoteEof(serializeField(ret)) + "\neof");
			CLI.println("ok" + id_or_empty(id));
			return ;
		}
		var xtraprops = curr_def[3];

		if (xtraprops != null)
		{
			var p = find_prop(xtraprops, action);
			if (p != null)
			{
				call(p[4])(curr_def[2], id, arg1, arg2, arg3);
				return ;
			}
		}
		CLI.println("error" + id_or_empty(id) + " \"invalid action for call\"");
	}
	else
		CLI.println("error" + id_or_empty(id) + " \"invalid path for call\"");
}

function net_set_file_ready(files, args)
{
	var file = files.get(0);
	CLI.println("got file for:" + curr_def[2] + "\n->\n" + file);
	var f = File.newFromString(file);
	f.readObject(curr_def[2]);
}

function net_set_file(id, path)
{
	var def = find_best_def(path);
	if (analyze_path(def, path))
	{
		if (curr_collection != null)
		{
			CLI.println("error" + id_or_empty(id) + " \"invalid collection path for set\"");
			return ;
		}
		var iface = Interface.makeFrom(curr_def[2]);
		if (iface == null)
		{
			CLI.println("error" + id_or_empty(id) + " \"object not found for set\"");
			return ;
		}
		requestFile("*", "Properties for " + path, function net_set_file_ready, []);
	}
	else
		CLI.println("error" + id_or_empty(id) + " \"invalid path for call\"");
}

function net_set(id, path, prop, value)
{
	var def = find_best_def(path);
	if (analyze_path(def, path))
	{
		if (curr_collection != null)
		{
			CLI.println("error" + id_or_empty(id) + " \"invalid collection path for set\"");
			return ;
		}
		var iface = Interface.makeFrom(curr_def[2]);
		if (iface == null)
		{
			CLI.println("error" + id_or_empty(id) + " \"object not found for set\"");
			return ;
		}
		var iprop = iface.findId(prop);
		if (iprop < 0)
		{
			var xtraprops = curr_def[3];
			if (xtraprops != null)
			{
				var p = find_prop(xtraprops, prop);
				if (p != null)
				{
					call(p[5])(curr_def[2], value);
					CLI.println("ok " + id);
					return ;
				}
			}
			CLI.println("error" + id_or_empty(id) + " \"invalid property for set\"");
			return ;
		}
		CLI.println("ok" + id_or_empty(id));
		var ret = iface.set(iprop, value);
	}
	else
		CLI.println("error" + id_or_empty(id) + " \"invalid path for set\"");
}


function net_info(id, path)
{
	var def = find_best_def(path);
	if (analyze_path(def, path))
	{
		if (String.left(curr_def[2], 1) == "e")
		{
			var obj = curr_def[4];
			obj = call(obj)(curr_parent);
			obj = obj.interface;
			standard_info(id, obj.name, obj, null);
		}
		else
			standard_info(id, curr_def[1], curr_def[2], curr_def[3]);
	}
	else
		CLI.println("error" + id_or_empty(id) + " \"invalid path for info\"");
}

function net_reg(id, path, type, name)
{
	var def = find_best_def(path);
	if (analyze_path(def, path))
	{
		if (String.substr(curr_def[2], 0, 1) == "e")
		{
			var value = curr_def[4];
			if (typeof(value) == "FunctionReference")
				value = call(value)(curr_parent);
			var event = EventReceiver.add(value);
			if (event != null)
			{
				event.type = type;
				if (name != null)
					event.id = name;
				event.name = path;
				event.path = "/cli/events/";
				CLI.println("ok" + id_or_empty(id) + " " + event.path + event.id);
				return ;
			}
			CLI.println("error" + id_or_empty(id));
			return ;
		}
	}
	CLI.println("error" + id_or_empty(id) + " \"invalid path for reg\"");
}

function skip_to_close(path, p)
{
	var p1, p2, p3;
	var retry = 1;
	while(retry)
	{
		p1 = String.indexOfStart(path, ")", p);
		p2 = String.indexOfStart(path, "(", p);
		if (p2 < 0) p2 = 9999;
		p3 = String.indexOfStart(path, "{", p);
		if (p3 < 0) p3 = 9999;
		if ((p2 < p1) && (p2 < p3))
		{
			p = skip_to_close(path, p2 + 1);
			continue;
		}
		if (p3 < p1)
		{
			p = skip_to_closebrace(path, p3 + 1);
			continue;
		}
		retry = 0;
	}
	if (p1 >= 0)
	{
		return p1 + 1;
	}
	return String.len(path);
}

function skip_to_closebrace(path, p)
{
	var p1, p2, p3;
	var retry = 1;
	while(retry)
	{
		p1 = String.indexOfStart(path, "}", p);
		p2 = String.indexOfStart(path, "{", p);
		if (p2 < 0) p2 = 9999;
		p3 = String.indexOfStart(path, "(", p);
		if (p3 < 0) p3 = 9999;
		if ((p2 < p1) && (p2 < p3))
		{
			p = skip_to_closebrace(path, p2 + 1);
			continue;
		}
		if (p3 < p1)
		{
			p = skip_to_close(path, p3 + 1);
			continue;
		}
		retry = 0;
	}
	if (p1 >= 0)
	{
		return p1 + 1;
	}
	return String.len(path);
}

function skip_to_comma(path, p)
{
	var p1, p2, p3, p4;
	var retry = 1;
	while(retry)
	{
		p1 = String.indexOfStart(path, ",", p);
		if (p1 < 0) p1 = 9999;
		p2 = String.indexOfStart(path, ")", p);
		p3 = String.indexOfStart(path, "(", p);
		if (p3 < 0) p3 = 9999;
		p4 = String.indexOfStart(path, "{", p);
		if (p4 < 0) p4 = 9999;

		if ((p3 < p1) && (p3 < p2) && (p3 < p4))
		{
			p = skip_to_close(path, p3 + 1);
			continue;
		}
		if ((p4 < p1) && (p4 < p2))
		{
			p = skip_to_closebrace(path, p4 + 1);
			continue;
		}
		retry = 0;
	}
	if (p1 < p2)
		return p1;
	if (p2 >= 0)
		return p2;
	return 9999;
}

function preprocess_parens(path)
{
	var p;
	p = String.indexOf(path, "(");
	if (p >= 0)
	{
		var c = Vector.new();
		var end = skip_to_close(path, p + 1);
		var pre = String.left(path, p);
		var post = String.substr(path, end, 9999);
		var p2;
		var newpath, newpp;
		p++;
		while(p < end)
		{
			p2 = skip_to_comma(path, p);
			newpath = pre + String.substr(path, p, p2 - p) + post;
			newpp = preprocess_parens(newpath);
			if (newpp)
			{
				var i;
				for(i = 0; i < newpp.size; i++) c.add(newpp[i]);
			}
			else
				c.add(newpath);
			p = p2 + 1;
		}
		return c;
	}
	return null;
}

function preprocess_plus(path)
{
	var p;
	p = String.indexOf(path, "+");
	if (p < 0) return null;

	var pre = String.left(path, p);
	var post = String.substr(path, p + 1, 9999);

	var def = find_best_def(pre);
	if (analyze_path(def, pre))
	{
		if (curr_collection != null)
		{
			var i, n = call(curr_collection[4])(curr_parent);
			if (n > 0)
			{
				var pp = Vector.new();
				for(i = 0; i < n; i++)
				{
					var newpath = pre + i + post;
					var newpp = preprocess_plus(newpath);
					if (newpp)
					{
						var j;
						for(j = 0; j < newpp.size; j++)
							pp.add(newpp[j]);
					}
					else
						pp.add(newpath);
				}
				return pp;
			}
		}
	}
	return Vector.new();
}

function preprocess_path(path)
{
	var pp;
	pp = preprocess_parens(path);
	if (pp)
	{
		var newpp = Vector.new();
		var i;
		for(i = 0; i < pp.size; i++)
		{
			var pp2 = preprocess_plus(pp[i]);
			if (pp2)
			{
				var j;
				for(j = 0; j < pp2.size; j++)
					newpp.add(pp2[j]);
			}
			else
				newpp.add(pp[i]);
		}
		return newpp;
	}
	else
		return preprocess_plus(path);
}

function net_get_3(id, path, attrs)
{
	var pp = preprocess_path(path);
	if (pp)
	{
		var i;
		for(i = 0; i < pp.size; i++)
		{
			var p = pp[i];
			var p_id = p;
			if (id != "") p_id = id + " " + p;
			net_get_work(p_id, p, attrs);
		}
		CLI.println("ok" + id_or_empty(id));
	}
	else
		net_get(id, path, attrs);
}

function net_get(id, path, attrs)
{
	if (net_get_work(id, path, attrs))
		CLI.println("ok" + id_or_empty(id));
	else
		CLI.println("error" + id_or_empty(id) + " \"invalid path for get\"");
}

function net_get_work(id, path, attrs)
{
	var def = find_best_def(path);
	if (String.right(path, 1) == "}")
	{
		var p = String.indexOf(path, "{");
		if (p >= 0)
		{
			attrs = String.substr(path, p + 1, String.len(path) - p - 2);
			path = String.left(path, p);
			id = path;
		}
	}
	if (analyze_path(def, path))
	{
		if (attrs != null)
			attrs = String.split(attrs, ",");
		CLI.println("file" + id_or_empty(id));
		if (curr_collection != null)
		{
			var n = call(curr_collection[4])(curr_parent), fun = curr_collection[5], i, obj;
			for (i = 0; i < n; i++)
			{
				obj = call(fun)(curr_parent, i);
				standard_get(obj, attrs);
			}
		}
		else
			standard_get(curr_def[2], attrs);
		CLI.println("eof");
		return 1;
	}
	else
		return 0;
}

function standard_get(obj, attrs)
{
	//Simulator.print("standard_get "+obj+"   name="+obj.name+"  def="+curr_def);
	var cls = curr_def[1];
	var xtraprops = curr_def[3];
	var f = File.new();
	var i;
	CLI.println(cls + ":");
	if (attrs == null)
	{
		if (obj != null)
			f.writeObjectFieldsForce(obj);
	}
	else
	{
		if (obj != null)
			for (i = 0; i < attrs.size; i++)
				f.writeObjectFieldForce(obj, attrs[i]);
	}
	CLI.print(String.quoteEof(f.close()));
	if (xtraprops != null)
	{
		if (attrs == null)
			for (i = 0; i < xtraprops.size; i++)
				get_single_prop(obj, xtraprops[i]);
		else
			for (i = 0; i < attrs.size; i++)
			{
				var p = find_prop(xtraprops, attrs[i]);
				if (p != null)
					get_single_prop(obj, p);
			}
	}
	CLI.println("");
}

function find_prop(props, name)
{
	var i, p;
	for (i = 0; i < props.size; i++)
	{
		p = props[i];
		if (p[0] == name)
			return p;
	}
	return null;
}

function get_single_prop(obj, prop)
{
	var t = prop[2];
	if (t == null)
		return ;
	t = String.substr(t, 0, 1);
	if ((t == "o") || (t == "p") || (t == "e"))
		return ;
	var value;
	if (typeof(prop[4]) == "FunctionReference")
		value = call(prop[4])(obj);
	else
		value = prop[4];
	CLI.print(String.quoteEof(makePropValue(prop[0], value)));
}

function makePropDef(id, name, type, flags, info, group)
{
	var ret;
	if (g_use_oldprop) ret = "prop:";
	else ret = "property:";
	ret += "\nid:" + id + "\nname:" + name + "\ntype:" + type + "\n";
	if (flags != 0)
		ret += "flags:" + flags + "\n";
	if (group != "")
		ret += "group:" + group + "\n";
	if (info != "")
	{
		if (String.indexOf(info, "\n") >= 0) info = "~\n" + info + "~";
		ret += "help:" + info + "\n";
	}
	return ret;
}

function makePropValue(name, value)
{
	if (String.indexOf(value, "\n") >= 0)
		return name + ":~\n" + value + "~\n";
	else
		return name + ":" + value + "\n";
}

function propsForObject(obj)
{
	if (obj == null)
		return "";
	var iface;
	if (typeof(obj) == "Interface")
		iface = obj;
	else
		iface = Interface.makeFrom(obj);
	var i, t, t1;
	var result = "";
	for (i = 0; i < iface.size; i++)
	{
		t = iface.getType(i);
		t1 = String.left(t, 1);
		if (t1 != "o")
			result = result + makePropDef(iface.getId(i), iface.getName(i), t,
			                              iface.getFlags(i), iface.getHelp(i),
						      g_use_groupnames ? iface.getGroupName(iface.getGroup(i)) : "") + "\n";
	}
	return result;
}

function net_get_object(obj, attrs)
{
	if (attrs != null)
		attrs = String.split(attrs, ",");
	var iface = Interface.makeFrom(obj);
	var a, i, t, t1;
	var result = "";
	if (attrs == null)
	{
		for (i = 0; i < iface.size; i++)
		{
			t = iface.getType(i);
			t1 = String.left(t, 1);
			if ((t1 != "o") && (t1 != "p"))
				result = result + makePropValue(iface.getId(i), iface.get(i));
		}
	}
	else
	{
		for (a = 0; a < attrs.size; a++)
		{
			i = iface.findId(attrs[a]);
			if (i < 0)
				continue;
			t = iface.getType(i);
			t1 = String.left(t, 1);
			if ((t1 != "o") && (t1 != "p"))
				result = result + makePropValue(iface.getId(i), iface.get(i));
		}
	}
	CLI.print(result);
}
