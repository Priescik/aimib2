function init()
{
	CLI.addMacro("lg", 0, "listgenotypes(0);", "list genotypes from group 0");
	CLI.addMacro("lg", 1, "listgenotypes($1);", "list genotypes from any group");
	CLI.addMacro("lc", 0, "listcreatures(0);", "list creatures from group 0");
	CLI.addMacro("lc", 1, "listcreatures($1);", "list creatures from any group");
	//CLI.addMacro("lgg",0,"....listing genotype groups...","list genotype groups");
	CLI.addMacro("help", 0, "shorthelp();", "display short help message");
	CLI.addMacro("qu", 0, "CLI.quit();", "leave comand shell");
	CLI.addMacro("lm", 0, "CLI.listMacros();", "list commandline macros");
	CLI.addMacro("st", 0, "Simulator.start();Simulator.step();Simulator.stop();GLDisplay.draw();", "do a single simulation step");
	CLI.addMacro("st", 1, "Simulator.start(); var i;for(i=0;i<$1;i++) Simulator.step(); Simulator.stop();", "do N simulation steps");
	CLI.addMacro("go", 0, "Simulator.start(); while(Simulator.running) Simulator.step();", "simulate until interrupted");
	CLI.addMacro("gst", 0, "GLDisplay.simsteps=2;GLDisplay.resume();", "simulate until interrupted, draw every 2-nd step");
	CLI.addMacro("gst", 1, "GLDisplay.simsteps=$1;GLDisplay.resume();", "simulate until interrupted, draw every N-th step");
	CLI.addMacro("lo", 1, "Simulator.load(\"$1\");", "load experiment state from file (*.expt)");
	CLI.addMacro("im", 1, "Simulator.import(\"$1\");", "import experiment data and/or settings from file (*.gen/*.sim/*.expt)");
	CLI.addMacro("sa", 1, "Simulator.save(\"$1\");", "save experiment state to file (*.expt)");
	CLI.addMacro("expdef", 1, "Simulator.expdef=\"$1\";", "set the experiment definition");
	CLI.addMacro("??", 1, "search(\"$1\");", "search classes information");
	CLI.addMacro("??", 0, "aftersearch();", "show last search results again");
	CLI.addMacro("?", -1, "CLI.println($0);", "evaluate expression");
	CLI.addMacro("gd", 0, "GLDisplay.draw();", "redraw and show world window");
	CLI.addMacro("gr", 0, "GLDisplay.resume();", "suspend shell and go to the world window");
	CLI.addMacro("st", 0, "GLDisplay.stop();", "stop the graphics display and go to the shell");
	CLI.addMacro("sh", 1, "ShowManager.show=\"$1\";GLDisplay.resume();", "load and run a show");
	CLI.addMacro("vs", 1, "VisualStyle.style=\"$1\";", "set the visual style");

	if (!CLI.quiet)
	{
		CLI.println("---------------------------------------------------");
		shorthelp();
	}

	ShowManager.excludeshows = "welcome,AL-*";
	ShowManager.show = "welcome";
	GLDisplay.resume();
}

function shorthelp()
{
	CLI.println("Basic commands:");
	CLI.println(" - help         : show this help message");
	CLI.println(" - qu or EOF    : leave command shell");
	CLI.println(" - sh SHOWNAME  : switch to another show");
	CLI.println(" - vs STYLENAME : change visual style");
	CLI.println(" - gr           : resume graphics display");
	CLI.println(" - lm           : list all commandline macros");
}

function search(word)
{
	var num = String.parseNumber(word);
	if (num != null)
	{
		showresult( -1 + num);
		return ;
	}
	ClassBrowser.search(word);
	aftersearch();
}

function aftersearch()
{
	var n = ClassBrowser.resultCount;
	if (n == 0)
	{
		CLI.println("not found!");
		return ;
	}
	if (n == 1)
		showresult(0);
	else
	{
		var i;
		for (i = 0; i < n; i++)
			CLI.println("" + (i + 1) + ". " + ClassBrowser.getLabel(i));
		CLI.println("  use ?? NUMBER to show item details");
	}
}

function showresult(which)
{
	if (which < 0)
		return ;
	if (which >= ClassBrowser.resultCount)
		return ;
	CLI.println(ClassBrowser.getText(which));
}

function listgenotypes(group)
{
	var gr = GenePools[group];
	if (gr.size == 0)
	{
		CLI.println("Group " + group + " is empty");
		return ;
	}
	RowFormat.clear();
	RowFormat.prepare(Genotype.*, "name/25,numparts/8,numneurons/8,instances/6,lifespan/8,velocity/8,fit2/8");
	CLI.println("%s(%d):" % gr.name % gr.size);
	CLI.println("  #  " + RowFormat.header);
	for (var g in gr)
		CLI.println("%3d. %s" % g.index % RowFormat.format(g));
}

function listcreatures(group)
{
	var gr = Populations[group];
	if (gr.size == 0)
	{
		CLI.println("Group " + group + " is empty");
		return ;
	}
	RowFormat.clear();
	RowFormat.prepare(Creature.*, "name/25,energy/8,perf/8,nnenabled/6,lifespan/8,velocity/8");
	CLI.println("%s(%d):" % gr.name % gr.size);
	CLI.println("  #  " + RowFormat.header);
	for (var c in gr)
		CLI.println("%3d. %s" % c.index % RowFormat.format(c));
}
function beforeLoad()
{
	GLDisplay.banner = "";
}
