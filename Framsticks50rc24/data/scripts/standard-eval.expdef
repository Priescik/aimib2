expdef:
name:Multiple evaluation of loaded genotypes
info:~
Use this experiment to evaluate all genotypes one by one.
Use the "Repeat count" parameter to set the required number of evaluations of each genotype.

First load your genotypes for evaluation, then define the evaluation plan, initialize the experiment, and finally run the simulation to perform all evaluations.

After evaluation, the selected key in the Genotype.data Dictionary ("evaluation" by default) contains a Dictionary of results. These results can also be saved to a file, as defined by the "evalsavefile" parameter. Note that for whatever reason (e.g. incorrect genotype), the dictionary you will get may be empty or partially empty and may not have the fields you expected, so handle such cases properly.
~
code:~

global g_evaluations; //Vector to hold subsequent genotype fitness values
global g_time0; //used for estimating simulation time needed for evaluation
global g_plan, g_current;
global g_first_instance;


function onExpDefLoad()
{
	// define genotype and creature groups
	GenePools[0].name = "Genotypes";
	update_fitformula();

	var p = Populations[0];
	p.name = "Creatures";
	p.initial_nn_active = 2;
	p.initial_perf_measuring = 2;
	p.selfmask = 0x10001;
	p.othermask = 0x20001;

	p = Populations.addGroup("Food");
	p.initial_nn_active = 0;
	p.initial_perf_measuring = 0;
	p.selfmask = 0x20002;
	p.othermask = 0x10002;

	//setting non-default values:
	ExpProperties.evalcount = 10;
	ExpProperties.p_nop = 1;
	ExpProperties.p_mut = 0;
	ExpProperties.p_xov = 0;
}

function onExpInit_Single()
{
	Populations[0].clear();
	Populations[1].clear();
	ExpState.totaltestedcr = 0;
	ExpProperties_cleardata_call();
	g_evaluations = [];
	g_first_instance = 1;
	g_time0 = null;
}

function useNextFromPlan()
{
	if (g_plan && (g_plan.size > 0))
	{
		g_current = g_plan[0];
		Simulator.print("Using plan: " + g_current);
		g_plan.remove(0);
		if (g_current[0] != "")
		{
			var manyfiles = String.split(g_current[0], "+");
			for(var f in manyfiles)
				Simulator.import(f);
		}
		return 1;
	}
	return 0;
}

function onExpInit()
{
	var lines = String.split2(String.replace(ExpProperties.evalplan, "\r", ""), "\n");
	g_plan = [];
	for (var line in lines)
	{
		line = String.replace(line, " ", "");
		var file_par = String.split(line, ":");
		if (file_par.size == 2)
		{
			var par = String.split(file_par[1], ",");
			g_plan.add([file_par[0], par]);
		}
	}

	if (g_plan.size == 0)
	{
		g_plan = null;
		Simulator.message("Evaluation plan is invalid", 2);
		ExpState.totaltestedcr = GenePools[0].size;
	}
	else
	{
		useNextFromPlan();
		if (g_current)
			for(var g in GenePools[0])
				g.data[ExpProperties.evalsavedata] = {};
		onExpInit_Single();
	}
}

function creatureNumJointsForEnergy(cr)
{
	var n = cr.numjoints;
	if (n == 0)
		n = cr.numparts; //creatures with only one Part will live just as long as one-stick creatures
	return n;
}

@include "standard_placement.inc"

function onBorn(cr)
{
	if (g_time0 == null) g_time0 = Math.time;
	const TRIALS = 50; //try to find free place 50 times
	var retry = TRIALS;
	var placed_ok = 0;
	while (retry--)
	{
		var trycentral = (ExpProperties.placement == 1) && (retry == TRIALS - 1); //place central only in the first trial
		placeCreatureRandomly(cr, trycentral, ExpProperties.rotation);
		if (!cr.boundingBoxCollisions(0))
		{
			placed_ok = 1;
			break;
		}
	}
	if (!placed_ok)
		Simulator.message("onBorn() could not avoid collisions.", 1);

	if (cr.population.index == 0)
	{
		// creature
		var n = creatureNumJointsForEnergy(cr);
		cr.idleen = ExpProperties.e_meta * n;
		cr.energy0 = cr.energy0 * ExpProperties.Energy0 * n;
		cr.energy = cr.energy0;
	}
	else
	{
		// food
		cr.name = "Food";
		cr.idleen = 0;
		cr.energy0 = ExpProperties.feede0;
		cr.energy = cr.energy0;
	}
}

function addfood()
{
	if (ExpProperties.foodgen == "")
		return Populations[1].add("//0\nm:Vstyle=food\np:");
	else
		return Populations[1].add(ExpProperties.foodgen);
}

function onStep()
{
	if (ExpState.totaltestedcr >= GenePools[0].size) //end condition tested onStep because it can sometimes restart the experiment which is fatal in onCreatureDied
	{
		if (g_plan == null) //invalid intitial conditions (no plan)
			Simulator.stop();
		else if (useNextFromPlan())
		{
			onExpInit_Single();
		}
		else
		{
			Simulator.print("Evaluation complete.");
			Simulator.stop();
			if (ExpProperties.evalsavefile != "")
				printStats(ExpProperties.evalsavefile);
		}
	}

	else

		if (Populations[0].size < ExpProperties.MaxCreated)
		{
			if (GenePools[0].size == 0)
			{
				Simulator.stop();
				Simulator.message("This experiment is designed to build creatures from genotypes, but the GenePool is empty.", 2);
			}
			else
			{
				if (g_first_instance)
				{
					//first instance of the next genotype: remove all existing creatures
					//for MaxCreated==1 the population is already empty because the only creature just died
					//for MaxCreated>1 creatures of the previous genotype can be still alive but they are useless
					//because have we already gathered the required number of evaluations.
					Populations[0].clear();
					g_first_instance = 0;
				}
				var g = selectedForCreation();
				//Simulator.print("g="+g);
				if (g)
				{
					var cr=null;
					if (g.is_valid)
					{
						cr = Populations[0].add(g);
						if (cr!=null)
							cr.data->genotype = g;
						else
							Simulator.message("Ignoring genotype #"+ExpState.totaltestedcr+" that cannot be built", 1);
					}
					else
						Simulator.message("Ignoring invalid genotype #"+ExpState.totaltestedcr, 1);
					if (cr==null)
					{
						g.data[ExpProperties.evalsavedata] = null;
						g.instances = 0;
						ExpState.totaltestedcr++;
					}
				}
				else
					Simulator.message("no genotype selected", 1);
			}
		}

	if (ExpProperties.aging > 0)
	{
		for(var cr in Populations[0])
			cr.idleen = ExpProperties.e_meta * creatureNumJointsForEnergy(cr)
			            * Math.exp((0.6931471806 * cr.steps_in_lifespan) / ExpProperties.aging);
	}

	if (Populations[1].size < ExpProperties.feed)
		addfood();
}

function addGenotypePerformanceFromCreature(g, cr)
{
// Want to copy customized values from Creature data fields to Genotype data fields? Do it here (or in a specialized Simulator.userscript function - see foodfinding-user.inc): g.data->myfield = cr.data->myfield;
// Want to take instances into account? Do it here: g.data->myfield = (float(g.data->myfield) * g.instances + cr.data->myfield) / (g.instances + 1);
	g.addPerformanceFromCreature(cr); //averages performances of "g" according to instances and increments instances
}

// returns Genotype object that was updated or created from cr, manage the standard-eval specific g_evaluations
function updatePerformanceWithPopSize(cr)
{
	// unlike standard.expdef, here the only possible behavior is analogous to GROUP_IDENTICAL_GENOTYPES=1: we can only store results in the existing genotypes. We should not create new genotype objects (like GROUP_IDENTICAL_GENOTYPES=0 would do).
	// The ugly part of the expdef-experiment interface: addGenotypePerformanceFromCreature() can only "append" data to the existing genotype (normally by averaging the relevant values). Here we call it twice, first to get the single Genotype performance (with instances=0) needed for stats, and again with original instances to let the function perform its own averaging like in normal experiment. Ideally the experiment should be able to return the individual Genotype performance so the data could be combined in different ways (not necessarily just averaging)

	var g = cr.data->genotype;

	// Now that .sim settings can define custom functions, allow them to override performance calculation (in addGenotypePerformanceFromCreature) and don't assume anything specific about their actions

	//todo: the trick is not necessary when instances==0 (but performing the trick anyway increases the chances of detecting misbehaving scripts :-P)

	var save_names = ["instances", "lifespan", "velocity", "distance", "vertvel", "vertpos"], save_values = {};
	for(var n in save_names) save_values[n] = g.[n]; //shame we can't just clone the Genotype object :-P
	var saved_data = g.data.clone();
	//g.data should be cleared here to make sure the fitness calculation can't use the accumulated information
	//in the "single fresh genotype" mode, unfortunately it can't be cleared without breaking experiments
	//that use data for anything else than accumulating performance. which is a pity because keeping 'data'
	//might be dangerous when the function tries to modify the compound objects in the single genotype mode
	//and it unexpectedly affects the original 'saved_data' (because Dictionary.clone() is shallow).
	//so, dear functions, please pretend the data does not contain things that should not exist when instances==0.
    
	g.instances = 0; //trick to have the fitness value for the single genotype instance...
	
	addGenotypePerformanceFromCreature(g, cr); //averages performances of "g" according to instances and increments instances (here: no average, instances=0)
    
	g_evaluations.add(g.fit); //...which is added to the vector
	for(var n in save_names) g.[n] = save_values[n]; //undo and add performance again, to calculate all other values correctly (g.fit is already saved for later)
        g.data = saved_data;

	addGenotypePerformanceFromCreature(g, cr); //averages performances of "g" according to instances and increments instances
    
	return g;
}

function printStats(filename)
{
	var info;
	var f = File.create(filename, "Evaluated genotypes");
	f.writeString("[\n");
	var first = 1;
	for (var g in GenePools[0])
	{
		if (first) first = 0;
		else f.writeString(",\n");
		info = g.data[ExpProperties.evalsavedata];
		f.writeString("{\"num\":" + g.num + ",\"name\":\"" + g.name + "\",\"evaluations\":" + String.toJSON(info) + "}");
	}
	f.writeString("\n]\n");
	f.close();
}

// standard-eval code operating above the Genotype level: managing the evaluation of subsequent genotypes, copying results to data->evalsavedata
function onDied(cr)
{
	//Simulator.print("on died cr="+cr+" group="+cr.population.name+" (#"+cr.population.index+")");
	var g = null;
	if (cr.population.index != 0)
		return null; // ignore food
	if (cr.perf_measuring != 2) //TODO discuss: or maybe it should always call updatePerformanceWithPopSize(), otherwise if a creature never stabilizes, it will be an endless loop trying to get its performance?
	{
		var g = cr.data->genotype;
		if (g == null)
		{
			Simulator.message("cr.data->genotype is null", 3);
			Simulator.stop();
		}
		if (g.instances >= ExpProperties.evalcount)
		{
			//this condition is checked again after updatePerf...()
			//but it's not the same:
			//here we detect the case where extra creature(s) die
			//AFTER the required number of instance measurements
			//have been accumulated, which can happen with MaxCreated>1
			//when more than one creature die during the same step.
			//such creatures must be ignored, so we don't call the
			//performance calculation.
			//
			//seemingly identical instances>=evalcount later means
			//the last instance was just evaluated and we move to
			//the next genotype
			return g;
		}

		g = updatePerformanceWithPopSize(cr);

		if (g.instances >= ExpProperties.evalcount) //genotype evaluation complete
		{
			g.instances = 0;
			var time = (Math.time - g_time0) / ExpProperties.evalcount;
			if (g_current)
			{
				var p = {};
				//save the specified Genotype fields in data->[evalsavedata]
				for(var pname in g_current[1])
				{
					var value;
					switch(pname)
					{
					case "fit":
						value = g_evaluations.avg;
						break;
					case "fit_stdev":
						value = g_evaluations.stdev;
						break;
					case "time":
						value = time;
						break;
					default:
						if (String.left(pname, 6) == "data->")
							value = g.data[String.substr(pname, 6)];
						else
							value = g.[pname];
					}
					p[pname] = value;
					g.data[ExpProperties.evalsavedata][g_current[0]] = p;
				}
			}
			if (Math.time - g_time0 > 2) Simulator.print("%d% complete..." % (100 * ExpState.totaltestedcr / GenePools[0].size));
			g_time0 = null;
			g_evaluations.clear();
			ExpState.totaltestedcr++;
			g_first_instance = 1;
		}
	}

	Simulator.checkpointData(ExpState.totaltestedcr);
	return g;
}

function selectedForDeletion()
{
	if (ExpProperties.delrule == 0)
		return GenePools.random();
	if (ExpProperties.delrule == 1)
		return GenePools.revroulette();
	return GenePools.worst();
}

function selectedForCreation()
{
	return GenePools[0][ExpState.totaltestedcr];
}

function onFoodCollision()
{
	var e = Collision.Part2.ing * ExpProperties.feedtrans;
	//Simulator.print("transferring "+e+" from "+Collision.Creature1.name+" to "+Collision.Creature2.name);
	Collision.Creature1.transferEnergyTo(Collision.Creature2, e);
}

function ExpProperties_cleardata_call()
{
	for(var g in GenePools[0])
		g.instances = 0;
	Simulator.print("Performance data reset.");
}

function limitPopulation(pop, n)
{
	n = pop.size - n;
	while (n > 0)
	{
		pop.delete(pop.size - 1);
		n--;
	}
}

function ExpProperties_MaxCreated_set()
{
	limitPopulation(Populations[0], ExpProperties.MaxCreated); //creatures
}

function ExpProperties_feed_set()
{
	limitPopulation(Populations[1], ExpProperties.feed); //food
}


@include "standard_fitformula.inc"
@include "standard_events.inc"
@include "standard_loadsave.inc"

~

#include "standard_props.inc"
#include "standard_props_eval.inc"

property:
id:cleardata
name:Clear performance info
type:p
help:~
Sets the number of instances of each genotype to zero (as if it has never been evaluated).
Genotype performance values stay intact, yet they are meaningless if a genotype has no instances.~

state:
id:notes
name:Notes
type:s 1
help:~
You can write anything here
(it will be saved to the experiment file)~

state:
id:totaltestedcr
name:Evaluated creatures
help:Total number of creatures evaluated in the experiment (excluding additional evaluations coming from evalcount). totaltestedcr==GenePool.size means finished.
type:d
flags:16

state:
id:creaturesgrouploaded
name:creaturesgrouploaded
type:d
flags:34
