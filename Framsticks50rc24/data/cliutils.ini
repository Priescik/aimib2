// This is an alternative .ini file for simple batch processing.
// Add the -e switch to suppress output messages.
//
// Sample usage:
//    frams -Q -s -icliutils.ini "isvalid inputfilename outputfilename" -q <input_genotype_if_from_stdin
//    frams -Q -s -icliutils.ini "makef0 inputfilename outputfilename" -q <input_genotype_if_from_stdin
//    frams -Q -s -icliutils.ini randomize "mutate inputfilename outputfilename" -q <input_genotype_if_from_stdin
//    frams -Q -s -icliutils.ini "dissimil filename.gen outputfilename" -q
//    frams -Q -s -icliutils.ini "diversity filename.gen outputfilename" -q
//    frams -Q -s -icliutils.ini "symmetry filename.gen" -q
//    frams -Q -s -icliutils.ini randomize "expdef standard-eval"  "evaluate settings.expt filename.gen genos_eval.json" -q
//    frams -Q -s -icliutils.ini htmlize -q <somegenotype
//    frams -Q -s -icliutils.ini htmlizeShort -q <somegenotype
//    frams -Q -s -icliutils.ini pjnc -q <somegenotype
//    frams -Q -s -icliutils.ini "getsimplest 1 outputfilename" -q
//    frams -Q -s -icliutils.ini randomize "crossover inputfilename1 inputfilename2 outputfilename" -q
//    frams -Q -s -icliutils.ini povray -q <somegenotype
//
// Where "inputfilename" or "outputfilename" is  mentioned, you can use "-" as a filename if you want stdin or stdout.


function init()
{
	CLI.addMacro("lm", 0, "CLI.listMacros();", "list command-line macros");

	CLI.addMacro("expdef", 1, "Simulator.expdef=\"$1\";", "set the experiment definition");
	CLI.addMacro("randomize", 0, "Math.randomize();", "initialize random seed randomly");
	CLI.addMacro("rndseed", 1, "Math.seed=$1;", "initialize random seed from the numeric argument");
	CLI.addMacro("isvalid", 2, "isValid(\"$1\",\"$2\");", "read genotype from file or stdin, print 0 (invalid) or 1 (valid)");
	CLI.addMacro("isvalid_many", 2, "isValidMany(\"$1\",\"$2\");", "read genotype(s) from file, print a series of 0 (invalid) or 1 (valid)");
	CLI.addMacro("makef0", 2, "convertTof0(\"$1\",\"$2\");", "read genotype from file or stdin, convert to f0. Output nothing when cannot convert.");
	CLI.addMacro("mutate", 2, "mutate(\"$1\",\"$2\");", "read genotype from file or stdin, then mutate and output");
	CLI.addMacro("mutate_many", 2, "mutateMany(\"$1\",\"$2\");", "read genotype(s) from file, mutate each and output mutants");
	CLI.addMacro("dissimil", 2, "GenePools[0].clear(); Simulator.import(\"$1\",2); calcDissimilarityMatrix(\"$2\");", "read genotypes from file, calculate dissimilarity matrix. Details in http://www.framsticks.com/bib/Komosinski-et-al-2001 , http://www.framsticks.com/bib/Komosinski-and-Kubiak-2011 and http://www.framsticks.com/bib/Komosinski-2016");
	CLI.addMacro("diversity", 2, "GenePools[0].clear(); Simulator.import(\"$1\",2); calcDiversity(\"$2\");", "read genotypes from file, calculate diversity of each genotype (actually dissimilarity to all others). Details in http://www.framsticks.com/bib/Komosinski-et-al-2001 , http://www.framsticks.com/bib/Komosinski-and-Kubiak-2011 and http://www.framsticks.com/bib/Komosinski-2016");
	CLI.addMacro("symmetry", 1, "GenePools[0].clear(); Simulator.import(\"$1\",2); calcSymmetry();", "read genotypes from file, calculate planar symmetry of a model made from each genotype. Details in http://www.framsticks.com/bib/Jaskowski-and-Komosinski-2008");
	CLI.addMacro("evaluate", 3, "GenePools[0].clear(); Simulator.import(\"$1\",2+4+8+16); Simulator.import(\"$2\",2); ExpProperties.evalsavefile=\"$3\"; Simulator.init(); Simulator.start(); while (Simulator.running) Simulator.step();", "evaluate genotypes and save results to a json file. Use .expt/.sim file compatible with standard-eval.expdef.");
	CLI.addMacro("htmlize", 0, "CLI.println(GenMan.toHTML(CLI.stdin.readUntilEOF()));", "print a genotype in HTML, using colors");
	CLI.addMacro("htmlizeShort", 0, "CLI.println(GenMan.toHTMLshort(CLI.stdin.readUntilEOF()));", "print a genotype (shortened if needed) in HTML, using colors");
	CLI.addMacro("pjnc", 0, "CLI.println(PJNCfromStdin());", "determine number of parts, joints, neurons, and neural connections for a genotype (read from stdin)");
	CLI.addMacro("getsimplest", 2, "writeToFileOrStdout(GenMan.getSimplest(\"$1\").genotype,\"$2\");", "output the simplest genotype in the encoding given");
	CLI.addMacro("crossover", 3, "crossOver(\"$1\",\"$2\",\"$3\");", "crossover two genotypes (each in one file; files should contain just raw genotypes) and output the result");
	CLI.addMacro("povray", 0, "povrayFromGeno(Geno.newFromString(CLI.stdin.readUntilEOF()));", "generate a POV-Ray file from the standard input genotype");
}


function readFromFileOrStdin(inputfilename)
{
	if (inputfilename == "-")
		return CLI.stdin.readUntilEOF();
	else
	{
		var f = File.open(inputfilename);
		var s = f.readUntilEOF();
		f.close();
		return s;
	}
}

function writeToFileOrStdout(s, outputfilename)
{
	if (outputfilename == "-")
		CLI.println(s); //compared to writing to file, we add \n at the end...
	else
	{
		var f = File.create(outputfilename, "%d bytes" % String.len(s)); //contrary to createDirect(), this way of opening a file for writing will only print the "FileObject.write: File has been saved" message AFTER the file is closed, not when it is opened. This is crucial for interoperability with FramsticksCLI.py which uses the "FileObject.write:" tag to detect the completion of each operation.
		f.writeString(s);
		f.close();
	}
}

function isValid(inputfilename, outputfilename)
{
	var g = readFromFileOrStdin(inputfilename);
	var geno = Geno.newFromString(g);
	writeToFileOrStdout(geno.is_valid, outputfilename);
}

function isValidMany(inputfilename, outputfilename)
{
	var pool = GenePools[0];
	pool.clear();
	Simulator.import(inputfilename, 2);
	var output = "";
	for (var i = 0; i < pool.size; i++)
	{
		output += pool[i].is_valid;
		output += "\n";
	}
	writeToFileOrStdout(output, outputfilename);
}

function convertTof0(inputfilename, outputfilename)
{
	var g = readFromFileOrStdin(inputfilename);
	var geno = Geno.newFromString(g);
	if (geno.is_valid)
		writeToFileOrStdout("//0\n" + geno.f0genotype, outputfilename);
}

function mutate(inputfilename, outputfilename)
{
	var g = readFromFileOrStdin(inputfilename);
	writeToFileOrStdout(GenMan.mutate(Geno.newFromString(g)).genotype, outputfilename);
}

function mutateMany(inputfilename, outputfilename)
{
	var pool = GenePools[0];
	pool.clear();
	Simulator.import(inputfilename, 2);
	for (var i = 0; i < pool.size; i++)
		pool[i].mutate();
	if (outputfilename != "-")
		outputfilename = "scripts_output" + File.pathseparator + outputfilename; //forced output dir because this is where FramsticksCLI.py always expects to find results
	Simulator.export(outputfilename, 2, 0, -1);
	CLI.println("FileObject.write: File saved"); //only for interoperability with FramsticksCLI.py which uses the "FileObject.write:" tag to detect the completion of each operation
}

function crossOver(inputfilename1, inputfilename2, outputfilename)
{
	var g1 = readFromFileOrStdin(inputfilename1);
	var g2 = readFromFileOrStdin(inputfilename2);
	writeToFileOrStdout(GenMan.crossOver(Geno.newFromString(g1), Geno.newFromString(g2)).genotype, outputfilename);
}


function calcDissimilarityMatrix(outputfilename)
{
	//you can adjust weights/parameters of measures from default values (but remember to set the proper SimilMeasure.type), e.g.:
	//SimilMeasureHungarian.simil_parts   =0.0;
	//SimilMeasureHungarian.simil_partdeg =1.0;
	//SimilMeasureHungarian.simil_neuro   =0.1;
	//SimilMeasureHungarian.simil_partgeom=0.0;
	//SimilMeasureHungarian.simil_fixedZaxis=0;

	var pool = GenePools[0];
	var output = "";

	output += "# Dissimilarity matrix (TAB-delimited). The two first columns are: final fitness and name.\n";
	output += "# Measure type used: %d\n" % SimilMeasure.simil_type;
	output += "# Matrix size (the number of individuals): %d\n" % pool.size;

	for (var i = 0; i < pool.size; i++)
	{
		var t = "%lg\t%s" % pool[i].fit2 % pool[i].name;
		for (var j = 0; j < pool.size; j++)
		{
			t += "\t%lg" % SimilMeasure.evaluateDistance(pool[i].geno, pool[j].geno);
		}
		output += t + "\n";
	}
	writeToFileOrStdout(output, outputfilename);
}

function calcDiversity(outputfilename)
{
	var pool = GenePools[0];
	var output = "";
	for (var i = 0; i < pool.size; i++)
	{
		var t = 0.0;
		for (var j = 0; j < pool.size; j++)
			t += SimilMeasure.evaluateDistance(pool[i].geno, pool[j].geno);
		output += string(t) + "\n";
	}
	writeToFileOrStdout(output, outputfilename);
}

function calcSymmetry()
{
	var detail = 100.0; //increase to get a more thorough search for the symmetry plane (note however that sym(Alpha/Beta/Pos)Steps fields are limited anyway). Decrease for faster evaluation.
	var i;
	for (i = 0; i < GenePool.size; i++)
	{
		var model = GenePool[i].getModel();
		//time complexity of ModelSymmetry.calculateSymmetry() is O(alphaSteps*betaSteps*posSteps * sticks^2*log(sticks))
		var sticks = model.numjoints;

		/* now adjust parameters to find the symmetry plane
		1. stepsAlpha = stepsBeta
		2. stepsAlpha >= 2
		3. posSteps >= 2
		angles are probably more important than posSteps, but hard to say how much (2, 3 times?)
		so let's divide angles by sqrt(sticks), and pos by sticks. log(sticks) in time complexity stays not depreciated */
		ModelSymmetry.symAlphaSteps = Math.max(2.0, detail * 2 / Math.sqrt(sticks));
		ModelSymmetry.symBetaSteps = ModelSymmetry.symAlphaSteps;
		ModelSymmetry.symPosSteps = Math.max(2, detail / sticks);

		//calculate
		var sym = ModelSymmetry.calculateSymmetry(model);
		Simulator.print(" " + sym + " " + ModelSymmetry.symAlphaSteps + " " + ModelSymmetry.symBetaSteps + " " + ModelSymmetry.symPosSteps + " " + model.geno.name);
	}
}

function PJNCfromStdin()
{
	var g = CLI.stdin.readUntilEOF();
	var o = Geno.newFromString(g);
	if (!o.is_valid)
		return "invalid_genotype";
	var o2 = GenePool.addGeno(o);
	return "" + int(o2.strsiz) + " " + int(o2.strjoints) + " " + int(o2.nnsiz) + " " + int(o2.nncon);
}


//converts all genotypes to the f0 format (useful because interpretation of genotypes in some formats (f2,f3,f7) depends on active neurons, their properties, properties of parts/joints etc.). f0 genototypes are independent from these settings.
function allToF0() //no macro defined for this, this source is just for reference
{
	var i;
	for (i = 0; i < GenePool.size; i++)
	{
		GenePool[i].name = "[f" + (GenePool[i].geno.format - 48) + "] " + GenePool[i].name;
		GenePool[i].genotype = GenePool[i].f0genotype;
	}
}

function povrayFromGeno(g)
{
	if (!g.is_valid)
	{
		CLI.println("invalid genotype: " + g.genotype);
		return;
	}
	var cr = Populations[0].add(g);
	TrackingCam.cam_tracking = 0; //tracking=off (don't follow the target)
	TrackingCam.cam_change = 1; //target change="cut" (set camera on target change, once)
	TrackingCam.cam_dir = 30; //azimuth
	TrackingCam.cam_h = 45; //height
	//TrackingCam.cam_zoom=0.8;

	// method 1: camera automatically follows CreatureSelection (set of creatures)
	CreatureSelection.add(cr);

	// method 2: define any camera target by coordinates
	//var size=(cr.size_x,cr.size_y,cr.size_z).length;
	//TrackingCam.setTarget(cr.center_x,cr.center_y,cr.center_z,size);

	TrackingCam.tick(0); //call tick() to update camera parameters (this is performed automatically in graphical environments)
	POVExport.povex_outdir = "";
	POVExport.povex_outfiles = "output.pov";
	POVExport.povex_now();
	Populations[0].delete(cr);
	CLI.println("POV-Ray filename: " + POVExport.povex_lastfile);
}
